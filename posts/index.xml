<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tyler Lawson</title>
    <link>https://tyler-lawson.com/posts/</link>
    <description>Recent content in Posts on Tyler Lawson</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 08 Jul 2021 19:46:41 -0400</lastBuildDate><atom:link href="https://tyler-lawson.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How To Auto Deploy a Hugo Theme Demo to Netlify</title>
      <link>https://tyler-lawson.com/posts/deploy-hugo-theme-demo-guide/</link>
      <pubDate>Thu, 08 Jul 2021 19:46:41 -0400</pubDate>
      
      <guid>https://tyler-lawson.com/posts/deploy-hugo-theme-demo-guide/</guid>
      <description>When writing a theme for Hugo you&amp;rsquo;ll often want to show a demo from the exampleSite directory. In order to build that directory as a Hugo site, you need to have the theme inside of it. I wrote a small npm package, hugo-theme-demo-builder that will clone the theme into your exampleSite directory and then run the hugo build command.
Step One: Install Package and Set Build Script The first thing to do would be to run the following from the root of your theme repo:</description>
    </item>
    
    <item>
      <title>First N Promises Resolved</title>
      <link>https://tyler-lawson.com/posts/first-n-promises-resolved/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tyler-lawson.com/posts/first-n-promises-resolved/</guid>
      <description>With Javascript at the moment, it is really easy to get the first 1 or l promises resolved in a list, where l is the length of the list. This is achieved with Promise.race and Promise.all respectively. When creating production applications Promise.allResolved is normally preferred since it will resolve even if one of the promises errors, but for the purposes of this post I will assume that all promises resolve successfully.</description>
    </item>
    
    <item>
      <title>A Terminal Friendly Sport Schedule</title>
      <link>https://tyler-lawson.com/posts/sprt-dot-dev/</link>
      <pubDate>Sat, 27 Mar 2021 18:31:35 +0000</pubDate>
      
      <guid>https://tyler-lawson.com/posts/sprt-dot-dev/</guid>
      <description>A few years ago I found a site/service called wttr.in that provides a terminal friendly weather report based on your location, or a location that you provide. For years, I had wanted to replicate this type of project for a simple view of the upcoming professional sports schedule, given a city. About a month ago I had a separate idea that I wanted to make an express app to play around with it after using it to make my team&amp;rsquo;s technical interview test at work.</description>
    </item>
    
    <item>
      <title>Hugo With Forestry Setup Guide</title>
      <link>https://tyler-lawson.com/posts/hugo-forestry-guide/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tyler-lawson.com/posts/hugo-forestry-guide/</guid>
      <description>The easiest way I have found to setup a static site with a CMS has been to use Forestry.io, Github, &amp;amp; Hugo. This stack is free, easy to use, and efficient.
You will new to install hugo for this demo.
Step One: Create A Repo and Add Hugo TLDR If you want to skip some of the setup just fork my starter project and jump to step 4.
To start, make a new repository on github.</description>
    </item>
    
  </channel>
</rss>
